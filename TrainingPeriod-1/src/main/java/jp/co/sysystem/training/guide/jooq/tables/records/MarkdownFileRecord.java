/*
 * This file is generated by jOOQ.
 */
package jp.co.sysystem.training.guide.jooq.tables.records;


import java.time.LocalDateTime;

import jp.co.sysystem.training.guide.jooq.tables.MarkdownFile;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * マークダウンファイル管理テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkdownFileRecord extends UpdatableRecordImpl<MarkdownFileRecord> implements Record10<UInteger, String, String, Integer, String, String, LocalDateTime, LocalDateTime, Byte, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>trainingguidebook.markdown_file.file_no</code>. ファイル番号
     */
    public void setFileNo(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.file_no</code>. ファイル番号
     */
    public UInteger getFileNo() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.file_id</code>. ファイルID
     */
    public void setFileId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.file_id</code>. ファイルID
     */
    public String getFileId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.task</code>.
     */
    public void setTask(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.task</code>.
     */
    public String getTask() {
        return (String) get(2);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.sort_order</code>.
     */
    public void setSortOrder(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.sort_order</code>.
     */
    public Integer getSortOrder() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.file_name</code>. ファイル名
     */
    public void setFileName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.file_name</code>. ファイル名
     */
    public String getFileName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.author</code>. 作成者
     */
    public void setAuthor(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.author</code>. 作成者
     */
    public String getAuthor() {
        return (String) get(5);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.upload_time</code>.
     * アップロード日時
     */
    public void setUploadTime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.upload_time</code>.
     * アップロード日時
     */
    public LocalDateTime getUploadTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.update_time</code>.
     */
    public void setUpdateTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.update_time</code>.
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.is_deleted</code>.
     * 論理削除フラグ：0-有効、1-削除済
     */
    public void setIsDeleted(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.is_deleted</code>.
     * 論理削除フラグ：0-有効、1-削除済
     */
    public Byte getIsDeleted() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>trainingguidebook.markdown_file.password</code>.
     */
    public void setPassword(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>trainingguidebook.markdown_file.password</code>.
     */
    public String getPassword() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<UInteger, String, String, Integer, String, String, LocalDateTime, LocalDateTime, Byte, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<UInteger, String, String, Integer, String, String, LocalDateTime, LocalDateTime, Byte, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return MarkdownFile.MARKDOWN_FILE.FILE_NO;
    }

    @Override
    public Field<String> field2() {
        return MarkdownFile.MARKDOWN_FILE.FILE_ID;
    }

    @Override
    public Field<String> field3() {
        return MarkdownFile.MARKDOWN_FILE.TASK;
    }

    @Override
    public Field<Integer> field4() {
        return MarkdownFile.MARKDOWN_FILE.SORT_ORDER;
    }

    @Override
    public Field<String> field5() {
        return MarkdownFile.MARKDOWN_FILE.FILE_NAME;
    }

    @Override
    public Field<String> field6() {
        return MarkdownFile.MARKDOWN_FILE.AUTHOR;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return MarkdownFile.MARKDOWN_FILE.UPLOAD_TIME;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return MarkdownFile.MARKDOWN_FILE.UPDATE_TIME;
    }

    @Override
    public Field<Byte> field9() {
        return MarkdownFile.MARKDOWN_FILE.IS_DELETED;
    }

    @Override
    public Field<String> field10() {
        return MarkdownFile.MARKDOWN_FILE.PASSWORD;
    }

    @Override
    public UInteger component1() {
        return getFileNo();
    }

    @Override
    public String component2() {
        return getFileId();
    }

    @Override
    public String component3() {
        return getTask();
    }

    @Override
    public Integer component4() {
        return getSortOrder();
    }

    @Override
    public String component5() {
        return getFileName();
    }

    @Override
    public String component6() {
        return getAuthor();
    }

    @Override
    public LocalDateTime component7() {
        return getUploadTime();
    }

    @Override
    public LocalDateTime component8() {
        return getUpdateTime();
    }

    @Override
    public Byte component9() {
        return getIsDeleted();
    }

    @Override
    public String component10() {
        return getPassword();
    }

    @Override
    public UInteger value1() {
        return getFileNo();
    }

    @Override
    public String value2() {
        return getFileId();
    }

    @Override
    public String value3() {
        return getTask();
    }

    @Override
    public Integer value4() {
        return getSortOrder();
    }

    @Override
    public String value5() {
        return getFileName();
    }

    @Override
    public String value6() {
        return getAuthor();
    }

    @Override
    public LocalDateTime value7() {
        return getUploadTime();
    }

    @Override
    public LocalDateTime value8() {
        return getUpdateTime();
    }

    @Override
    public Byte value9() {
        return getIsDeleted();
    }

    @Override
    public String value10() {
        return getPassword();
    }

    @Override
    public MarkdownFileRecord value1(UInteger value) {
        setFileNo(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value2(String value) {
        setFileId(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value3(String value) {
        setTask(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value4(Integer value) {
        setSortOrder(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value5(String value) {
        setFileName(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value6(String value) {
        setAuthor(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value7(LocalDateTime value) {
        setUploadTime(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value8(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value9(Byte value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public MarkdownFileRecord value10(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public MarkdownFileRecord values(UInteger value1, String value2, String value3, Integer value4, String value5, String value6, LocalDateTime value7, LocalDateTime value8, Byte value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MarkdownFileRecord
     */
    public MarkdownFileRecord() {
        super(MarkdownFile.MARKDOWN_FILE);
    }

    /**
     * Create a detached, initialised MarkdownFileRecord
     */
    public MarkdownFileRecord(UInteger fileNo, String fileId, String task, Integer sortOrder, String fileName, String author, LocalDateTime uploadTime, LocalDateTime updateTime, Byte isDeleted, String password) {
        super(MarkdownFile.MARKDOWN_FILE);

        setFileNo(fileNo);
        setFileId(fileId);
        setTask(task);
        setSortOrder(sortOrder);
        setFileName(fileName);
        setAuthor(author);
        setUploadTime(uploadTime);
        setUpdateTime(updateTime);
        setIsDeleted(isDeleted);
        setPassword(password);
        resetChangedOnNotNull();
    }
}
