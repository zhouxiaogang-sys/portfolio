/*
 * This file is generated by jOOQ.
 */
package jp.co.sysystem.training.guide.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jp.co.sysystem.training.guide.jooq.Indexes;
import jp.co.sysystem.training.guide.jooq.Keys;
import jp.co.sysystem.training.guide.jooq.Trainingguidebook;
import jp.co.sysystem.training.guide.jooq.tables.records.FileHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 編集記録表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileHistory extends TableImpl<FileHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trainingguidebook.file_history</code>
     */
    public static final FileHistory FILE_HISTORY = new FileHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileHistoryRecord> getRecordType() {
        return FileHistoryRecord.class;
    }

    /**
     * The column <code>trainingguidebook.file_history.id</code>. PK ID
     */
    public final TableField<FileHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "PK ID");

    /**
     * The column <code>trainingguidebook.file_history.file_path</code>. ファイルパス
     */
    public final TableField<FileHistoryRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.VARCHAR(500).nullable(false), this, "ファイルパス");

    /**
     * The column <code>trainingguidebook.file_history.content</code>. ファイルコンテンツ
     */
    public final TableField<FileHistoryRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "ファイルコンテンツ");

    /**
     * The column <code>trainingguidebook.file_history.commit_message</code>.
     * コミット情報
     */
    public final TableField<FileHistoryRecord, String> COMMIT_MESSAGE = createField(DSL.name("commit_message"), SQLDataType.VARCHAR(500).nullable(false), this, "コミット情報");

    /**
     * The column <code>trainingguidebook.file_history.author</code>. 作者
     */
    public final TableField<FileHistoryRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(100).nullable(false), this, "作者");

    /**
     * The column <code>trainingguidebook.file_history.create_time</code>. 作成日付
     */
    public final TableField<FileHistoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "作成日付");

    /**
     * The column <code>trainingguidebook.file_history.version</code>. ヴァージョン
     */
    public final TableField<FileHistoryRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(50).nullable(false), this, "ヴァージョン");

    private FileHistory(Name alias, Table<FileHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileHistory(Name alias, Table<FileHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("編集記録表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>trainingguidebook.file_history</code> table
     * reference
     */
    public FileHistory(String alias) {
        this(DSL.name(alias), FILE_HISTORY);
    }

    /**
     * Create an aliased <code>trainingguidebook.file_history</code> table
     * reference
     */
    public FileHistory(Name alias) {
        this(alias, FILE_HISTORY);
    }

    /**
     * Create a <code>trainingguidebook.file_history</code> table reference
     */
    public FileHistory() {
        this(DSL.name("file_history"), null);
    }

    public <O extends Record> FileHistory(Table<O> child, ForeignKey<O, FileHistoryRecord> key) {
        super(child, key, FILE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trainingguidebook.TRAININGGUIDEBOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILE_HISTORY_IDX_CREATE_TIME, Indexes.FILE_HISTORY_IDX_FILE_PATH, Indexes.FILE_HISTORY_IDX_VERSION);
    }

    @Override
    public Identity<FileHistoryRecord, Long> getIdentity() {
        return (Identity<FileHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FileHistoryRecord> getPrimaryKey() {
        return Keys.KEY_FILE_HISTORY_PRIMARY;
    }

    @Override
    public FileHistory as(String alias) {
        return new FileHistory(DSL.name(alias), this);
    }

    @Override
    public FileHistory as(Name alias) {
        return new FileHistory(alias, this);
    }

    @Override
    public FileHistory as(Table<?> alias) {
        return new FileHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileHistory rename(String name) {
        return new FileHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileHistory rename(Name name) {
        return new FileHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileHistory rename(Table<?> name) {
        return new FileHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
