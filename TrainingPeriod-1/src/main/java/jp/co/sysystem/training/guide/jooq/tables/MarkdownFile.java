/*
 * This file is generated by jOOQ.
 */
package jp.co.sysystem.training.guide.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jp.co.sysystem.training.guide.jooq.Indexes;
import jp.co.sysystem.training.guide.jooq.Keys;
import jp.co.sysystem.training.guide.jooq.Trainingguidebook;
import jp.co.sysystem.training.guide.jooq.tables.records.MarkdownFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * マークダウンファイル管理テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkdownFile extends TableImpl<MarkdownFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trainingguidebook.markdown_file</code>
     */
    public static final MarkdownFile MARKDOWN_FILE = new MarkdownFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkdownFileRecord> getRecordType() {
        return MarkdownFileRecord.class;
    }

    /**
     * The column <code>trainingguidebook.markdown_file.file_no</code>. ファイル番号
     */
    public final TableField<MarkdownFileRecord, UInteger> FILE_NO = createField(DSL.name("file_no"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "ファイル番号");

    /**
     * The column <code>trainingguidebook.markdown_file.file_id</code>. ファイルID
     */
    public final TableField<MarkdownFileRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.VARCHAR(32).nullable(false), this, "ファイルID");

    /**
     * The column <code>trainingguidebook.markdown_file.task</code>.
     */
    public final TableField<MarkdownFileRecord, String> TASK = createField(DSL.name("task"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>trainingguidebook.markdown_file.sort_order</code>.
     */
    public final TableField<MarkdownFileRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trainingguidebook.markdown_file.file_name</code>. ファイル名
     */
    public final TableField<MarkdownFileRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(255).nullable(false), this, "ファイル名");

    /**
     * The column <code>trainingguidebook.markdown_file.author</code>. 作成者
     */
    public final TableField<MarkdownFileRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(50).nullable(false), this, "作成者");

    /**
     * The column <code>trainingguidebook.markdown_file.upload_time</code>.
     * アップロード日時
     */
    public final TableField<MarkdownFileRecord, LocalDateTime> UPLOAD_TIME = createField(DSL.name("upload_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "アップロード日時");

    /**
     * The column <code>trainingguidebook.markdown_file.update_time</code>.
     */
    public final TableField<MarkdownFileRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trainingguidebook.markdown_file.is_deleted</code>.
     * 論理削除フラグ：0-有効、1-削除済
     */
    public final TableField<MarkdownFileRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "論理削除フラグ：0-有効、1-削除済");

    /**
     * The column <code>trainingguidebook.markdown_file.password</code>.
     */
    public final TableField<MarkdownFileRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    private MarkdownFile(Name alias, Table<MarkdownFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkdownFile(Name alias, Table<MarkdownFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("マークダウンファイル管理テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>trainingguidebook.markdown_file</code> table
     * reference
     */
    public MarkdownFile(String alias) {
        this(DSL.name(alias), MARKDOWN_FILE);
    }

    /**
     * Create an aliased <code>trainingguidebook.markdown_file</code> table
     * reference
     */
    public MarkdownFile(Name alias) {
        this(alias, MARKDOWN_FILE);
    }

    /**
     * Create a <code>trainingguidebook.markdown_file</code> table reference
     */
    public MarkdownFile() {
        this(DSL.name("markdown_file"), null);
    }

    public <O extends Record> MarkdownFile(Table<O> child, ForeignKey<O, MarkdownFileRecord> key) {
        super(child, key, MARKDOWN_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trainingguidebook.TRAININGGUIDEBOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MARKDOWN_FILE_IDX_AUTHOR, Indexes.MARKDOWN_FILE_IDX_UPDATE_TIME, Indexes.MARKDOWN_FILE_IDX_UPLOAD_TIME);
    }

    @Override
    public Identity<MarkdownFileRecord, UInteger> getIdentity() {
        return (Identity<MarkdownFileRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkdownFileRecord> getPrimaryKey() {
        return Keys.KEY_MARKDOWN_FILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MarkdownFileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MARKDOWN_FILE_UK_FILE_ID, Keys.KEY_MARKDOWN_FILE_UK_TASK_SORT);
    }

    @Override
    public MarkdownFile as(String alias) {
        return new MarkdownFile(DSL.name(alias), this);
    }

    @Override
    public MarkdownFile as(Name alias) {
        return new MarkdownFile(alias, this);
    }

    @Override
    public MarkdownFile as(Table<?> alias) {
        return new MarkdownFile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFile rename(String name) {
        return new MarkdownFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFile rename(Name name) {
        return new MarkdownFile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFile rename(Table<?> name) {
        return new MarkdownFile(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UInteger, String, String, Integer, String, String, LocalDateTime, LocalDateTime, Byte, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UInteger, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UInteger, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
