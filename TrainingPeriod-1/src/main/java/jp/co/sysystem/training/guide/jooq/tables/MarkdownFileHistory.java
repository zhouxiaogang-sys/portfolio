/*
 * This file is generated by jOOQ.
 */
package jp.co.sysystem.training.guide.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jp.co.sysystem.training.guide.jooq.Indexes;
import jp.co.sysystem.training.guide.jooq.Keys;
import jp.co.sysystem.training.guide.jooq.Trainingguidebook;
import jp.co.sysystem.training.guide.jooq.tables.records.MarkdownFileHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * マークダウンファイル変更履歴テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkdownFileHistory extends TableImpl<MarkdownFileHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>trainingguidebook.markdown_file_history</code>
     */
    public static final MarkdownFileHistory MARKDOWN_FILE_HISTORY = new MarkdownFileHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkdownFileHistoryRecord> getRecordType() {
        return MarkdownFileHistoryRecord.class;
    }

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.history_no</code>. 履歴番号
     */
    public final TableField<MarkdownFileHistoryRecord, UInteger> HISTORY_NO = createField(DSL.name("history_no"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "履歴番号");

    /**
     * The column <code>trainingguidebook.markdown_file_history.file_no</code>.
     * ファイル番号
     */
    public final TableField<MarkdownFileHistoryRecord, UInteger> FILE_NO = createField(DSL.name("file_no"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "ファイル番号");

    /**
     * The column <code>trainingguidebook.markdown_file_history.modifier</code>.
     * 変更者
     */
    public final TableField<MarkdownFileHistoryRecord, String> MODIFIER = createField(DSL.name("modifier"), SQLDataType.VARCHAR(50).nullable(false), this, "変更者");

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.modify_time</code>. 変更日時
     */
    public final TableField<MarkdownFileHistoryRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "変更日時");

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.modify_type</code>.
     * 変更種別：作成/更新/削除
     */
    public final TableField<MarkdownFileHistoryRecord, String> MODIFY_TYPE = createField(DSL.name("modify_type"), SQLDataType.VARCHAR(20).nullable(false), this, "変更種別：作成/更新/削除");

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.modify_content</code>. 変更内容
     */
    public final TableField<MarkdownFileHistoryRecord, String> MODIFY_CONTENT = createField(DSL.name("modify_content"), SQLDataType.CLOB, this, "変更内容");

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.old_file_name</code>.
     * 変更前のファイル名
     */
    public final TableField<MarkdownFileHistoryRecord, String> OLD_FILE_NAME = createField(DSL.name("old_file_name"), SQLDataType.VARCHAR(255), this, "変更前のファイル名");

    /**
     * The column
     * <code>trainingguidebook.markdown_file_history.new_file_name</code>.
     * 変更後のファイル名
     */
    public final TableField<MarkdownFileHistoryRecord, String> NEW_FILE_NAME = createField(DSL.name("new_file_name"), SQLDataType.VARCHAR(255), this, "変更後のファイル名");

    private MarkdownFileHistory(Name alias, Table<MarkdownFileHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkdownFileHistory(Name alias, Table<MarkdownFileHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("マークダウンファイル変更履歴テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>trainingguidebook.markdown_file_history</code>
     * table reference
     */
    public MarkdownFileHistory(String alias) {
        this(DSL.name(alias), MARKDOWN_FILE_HISTORY);
    }

    /**
     * Create an aliased <code>trainingguidebook.markdown_file_history</code>
     * table reference
     */
    public MarkdownFileHistory(Name alias) {
        this(alias, MARKDOWN_FILE_HISTORY);
    }

    /**
     * Create a <code>trainingguidebook.markdown_file_history</code> table
     * reference
     */
    public MarkdownFileHistory() {
        this(DSL.name("markdown_file_history"), null);
    }

    public <O extends Record> MarkdownFileHistory(Table<O> child, ForeignKey<O, MarkdownFileHistoryRecord> key) {
        super(child, key, MARKDOWN_FILE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trainingguidebook.TRAININGGUIDEBOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MARKDOWN_FILE_HISTORY_IDX_FILE_NO, Indexes.MARKDOWN_FILE_HISTORY_IDX_MODIFY_TIME);
    }

    @Override
    public Identity<MarkdownFileHistoryRecord, UInteger> getIdentity() {
        return (Identity<MarkdownFileHistoryRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkdownFileHistoryRecord> getPrimaryKey() {
        return Keys.KEY_MARKDOWN_FILE_HISTORY_PRIMARY;
    }

    @Override
    public List<ForeignKey<MarkdownFileHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HISTORY_FILE);
    }

    private transient MarkdownFile _markdownFile;

    /**
     * Get the implicit join path to the
     * <code>trainingguidebook.markdown_file</code> table.
     */
    public MarkdownFile markdownFile() {
        if (_markdownFile == null)
            _markdownFile = new MarkdownFile(this, Keys.FK_HISTORY_FILE);

        return _markdownFile;
    }

    @Override
    public MarkdownFileHistory as(String alias) {
        return new MarkdownFileHistory(DSL.name(alias), this);
    }

    @Override
    public MarkdownFileHistory as(Name alias) {
        return new MarkdownFileHistory(alias, this);
    }

    @Override
    public MarkdownFileHistory as(Table<?> alias) {
        return new MarkdownFileHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFileHistory rename(String name) {
        return new MarkdownFileHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFileHistory rename(Name name) {
        return new MarkdownFileHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkdownFileHistory rename(Table<?> name) {
        return new MarkdownFileHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UInteger, UInteger, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UInteger, ? super UInteger, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UInteger, ? super UInteger, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
